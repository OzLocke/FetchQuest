<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controllerIcon</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Build static UI elements
global.shadowScale = 1.02;
global.shadowOffset = 8;
global.buttonPressDepth = 8;
global.fontBlack = make_color_rgb(33,33,33);

if(room == rm_main){
    
    with(instance_create(2400, 94, obj_stateButton)){
        target = "Quit";
        
        var shadow = instance_create(x, y + global.shadowOffset, obj_stateButtonShadow);
        shadow.image_xscale = global.shadowScale;
        
        instance_create(x, y, obj_stateText);
    };
    
    with(instance_create(320, 64, obj_textContainer)){
        var shadow = instance_create(x - global.shadowOffset, y + global.shadowOffset, obj_textContainerShadow);
        shadow.image_xscale = global.shadowScale;
    };
    
    with(instance_create(1248, 832, obj_invContainer)){
        var shadow = instance_create(x - global.shadowOffset, y + global.shadowOffset, obj_invContainerShadow);
        shadow.image_xscale = global.shadowScale;
    };
    
    with(instance_create(1248, 64, obj_imageContainer)){
        var image = instance_create(x + 6, y + 6, obj_image);
        image.image_xscale = 0.99;
        image.image_yscale = 0.99;
        
        var shadow = instance_create(x - global.shadowOffset, y + global.shadowOffset, obj_imageContainerShadow);
        shadow.image_xscale = global.shadowScale;
    };
    
};

//Build start button
if(room == rm_startScreen){
    var xPos = room_width / 2;
    var yPos = room_height * 0.25;
    
    instance_create(xPos, yPos, obj_logo); 

    xPos = room_width / 2;
    yPos = room_height * 0.75;
    
    with(instance_create(xPos, yPos, obj_startButton)){
        
        var shadow = instance_create(xPos, yPos + global.shadowOffset, obj_startButtonShadow);
        shadow.image_xscale = global.shadowScale;
        
        var text = instance_create(xPos, yPos, obj_startText);
        text.str = "START";
    };

};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Configure variables and launch controller scripts

//---Define variables for running button press functions---
/*
target = "start";
switch(room){
    case "rm_startScreen":
    target = "start";
    break;
    
    case "rm_intro":
    target = "intro";
    break;
    
    case "rm_main":
    target = "homeInterior";
    break;
};
*/
if(room == rm_startScreen) target = "start";
if(room == rm_intro) target = "intro";
if(room == rm_main) target = "homeInterior";

inventoryGet = "NOTHING";
inventoryNeed = "NOTHING";
inventoryMissingTarget = "NOTHING";
inventoryDestroy = "NOTHING";

//---Run create inventory script---
if(room == rm_main) scr_createInventory();

//---Run create navigation script---
if(room == rm_main) scr_createNavigation();
    
//---Run controller script---
if(room != rm_startScreen) scr_controller(target);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set screen display

base_width = room_width;
base_height = room_height;
width = base_width;
height = base_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset button and start timer to move to new screen
startButton.y -= global.buttonPressDepth;
startShadow.image_xscale = global.shadowScale;
alarm_set(1, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move to next room
room_goto(rm_main);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset button and start timer to move to new screen
stateButton.y -= global.buttonPressDepth;
stateShadow.image_xscale = global.shadowScale;
alarm_set(1, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change page variable and return controller script
if(room == rm_startScreen){
    room_goto(rm_intro);
} else if(target = "Quit"){
        game_restart();
} else {

var itemMissingFail = 0;

    //---Check for required items---
    if(inventoryNeed != "NOTHING"){
    
        //Find item in grid by name
        var itemLocation = ds_grid_value_y(global.inventory, 0, 0, 5, ds_grid_height(global.inventory), inventoryNeed);
       
        //Set page target to missing item target
        if(ds_grid_get(global.inventory, 1, itemLocation) == 0){
            target = inventoryMissingTarget; 
            itemMissingFail = 1;
        };
    };
    
    //---Get new items---
    if(inventoryGet != "NOTHING" &amp;&amp; itemMissingFail == 0){
        
        //Find item in grid by name
        var itemLocation = ds_grid_value_y(global.inventory, 0, 0, 5, ds_grid_height(global.inventory), inventoryGet);
        
        //Set found value for that item to true
        ds_grid_set(global.inventory, 1, itemLocation, 1);
    };
    
    
    //---Destroy items---
    if(inventoryDestroy != "NOTHING" &amp;&amp; itemMissingFail == 0){
        
        //Find item in grid by name
        var itemLocation = ds_grid_value_y(global.inventory, 0, 0, 5, ds_grid_height(global.inventory), inventoryDestroy);
        
        //If the item has been found (so it's not destroyed before it's used) destroy it
        if(ds_grid_get(global.inventory, 1, itemLocation) == 1){
            ds_grid_set(global.inventory, 2, itemLocation, 1);
        };
    };
//---Set new page---
scr_controller(target);
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset button and start timer to move to new screen
choiceButton.y -= global.buttonPressDepth;
choiceShadow.image_xscale = global.shadowScale;
alarm_set(1, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scale canvas


//DISABLED AS IT WAS CAUSING PROBLEMS ON SMALLER SCREENS

///Scale canvas
if (browser_width != width || browser_height != height)
    {
    width = min(base_width, browser_width);
    height = min(base_height, browser_height);
    scr_scaleCanvas(base_width, base_height, width, height, true);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///User input

//---Mouse click inputs---
if(mouse_check_button_released(mb_left)){

    choiceButton = instance_position(mouse_x, mouse_y, obj_choiceButton);
    if(choiceButton != noone){
        choiceButton.y += global.buttonPressDepth;
        
        target = choiceButton.target;
        inventoryGet = choiceButton.inventoryGet;
        inventoryNeed = choiceButton.inventoryNeed;
        inventoryMissingTarget = choiceButton.inventoryMissingTarget;
        inventoryDestroy = choiceButton.inventoryDestroy;
        
        choiceShadow = instance_position(choiceButton.x, choiceButton.y, obj_choiceButtonShadow);
        choiceShadow.image_xscale = 1;
        
        alarm_set(0,2);
    };
    
    stateButton = instance_position(mouse_x, mouse_y, obj_stateButton);
    if(stateButton != noone){
        stateButton.y += global.buttonPressDepth;
        target = stateButton.target;
        
        stateShadow = instance_position(stateButton.x, stateButton.y, obj_stateButtonShadow);
        stateShadow.image_xscale = 1;
              
        alarm_set(2,2);
    };
    
    startButton = instance_position(mouse_x, mouse_y, obj_startButton);
    if(startButton != noone){
        startButton.y += global.buttonPressDepth;
        
        startShadow = instance_position(startButton.x, startButton.y, obj_startButtonShadow);
        startShadow.image_xscale = 1;
        
        alarm_set(4,2);
    };
    
    //Skip intro
    if(room == rm_intro) room_goto(rm_main);
};

//---Keyboard press inputs---
if(keyboard_check_released(vk_anykey)){
    //Skip intro
    if(room == rm_intro) room_goto(rm_main);
} 

//---Tooltips on inventory items---
var invItem;
invItem = instance_position(mouse_x, mouse_y, obj_item);

if(invItem != noone){
var tooltipPart;
    
    if(!instance_exists(obj_tooltipContainer)){    
        with(instance_create(mouse_x, mouse_y, obj_tooltipContainer)){
            if(!instance_exists(obj_tooltipTitle)){
                tooltipPart = instance_create(x, y, obj_tooltipTitle);
                tooltipPart.str = ds_grid_get(global.inventory, 0, invItem.image_index);
            };
            if(!instance_exists(obj_tooltipText)){
                tooltipPart = instance_create(x , y, obj_tooltipText);
                tooltipPart.str = ds_grid_get(global.inventory, 3, invItem.image_index);
            };
            if(!instance_exists(obj_tooltipContainerShadow)){
                tooltipPart = instance_create(x - global.shadowOffset, y + global.shadowOffset, obj_tooltipContainerShadow);
            };
        };
    };
    

}else if(instance_exists(obj_tooltipContainer)){
    instance_destroy(obj_tooltipContainer);
    instance_destroy(obj_tooltipTitle);
    instance_destroy(obj_tooltipText);
    instance_destroy(obj_tooltipContainerShadow);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

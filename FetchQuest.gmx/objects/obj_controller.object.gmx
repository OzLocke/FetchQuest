<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controllerIcon</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Configure variables and launch controller scripts

//---Define variables for running button press functions---
if(room == rm_intro) target = "intro" else target = "homeInterior";
inventoryGet = "NOTHING";
inventoryNeed = "NOTHING";
inventoryMissingTarget = "NOTHING";
inventoryDestroy = "NOTHING";

//---Run create inventory script---
if(room == rm_main) scr_createInventory();
    
//---Run controller script---
if(room != rm_startScreen) scr_controller(target);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set screen display

base_width = room_width;
base_height = room_height;
width = base_width;
height = base_height;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Build state buttons
if(room == rm_main){
    
    with(instance_create(2400, 94, obj_stateButton)){
        target = "Quit";
        instance_create(x, y, obj_stateText);
    };
    
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set timer to move to next screen
if(room == rm_intro) alarm_set(3,120);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move to next room
room_goto(rm_main);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset button and start timer to move to new screen
stateButton.y -= 8;
alarm_set(1, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change page variable and return controller script
if(room == rm_startScreen){
    room_goto(rm_intro);
} else if(target = "Quit"){
        game_restart();
} else {

    //---Get new items---
    if(inventoryGet != "NOTHING"){
        
        //Find item in grid by name
        var itemLocation = ds_grid_value_y(global.inventory, 0, 0, 5, ds_grid_height(global.inventory), inventoryGet);
        
        //Set found value for that item to true
        ds_grid_set(global.inventory, 1, itemLocation, 1);
    };
    
    //---Check for required items---
    if(inventoryNeed != "NOTHING"){
    
        //Find item in grid by name
        var itemLocation = ds_grid_value_y(global.inventory, 0, 0, 5, ds_grid_height(global.inventory), inventoryNeed);
       
        //Set page target to missing item target
        if(ds_grid_get(global.inventory, 1, itemLocation) == 0) target = inventoryMissingTarget; 
    };
    
    //---Destroy items---
    if(inventoryDestroy != "NOTHING"){
        
        //Find item in grid by name
        var itemLocation = ds_grid_value_y(global.inventory, 0, 0, 5, ds_grid_height(global.inventory), inventoryDestroy);
        
        //If the item has been found (so it's not destroyed before it's used) destroy it
        if(ds_grid_get(global.inventory, 1, itemLocation) == 1){
            ds_grid_set(global.inventory, 2, itemLocation, 1);
        };
    };
    
    //---Set new page---
    scr_controller(target);
};



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset button and start timer to move to new screen
choiceButton.y -= 8;
alarm_set(1, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scale canvas


//DISABLED AS IT WAS CAUSING PROBLEMS ON SMALLER SCREENS

///Scale canvas
if (browser_width != width || browser_height != height)
    {
    width = min(base_width, browser_width);
    height = min(base_height, browser_height);
    scr_scaleCanvas(base_width, base_height, width, height, true);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///User input

//---Mouse click inputs---
if(mouse_check_button_released(mb_left)){

    choiceButton = instance_position(mouse_x, mouse_y, obj_choiceButton);
    if(choiceButton != noone){
        choiceButton.y += 8;
        
        target = choiceButton.target;
        inventoryGet = choiceButton.inventoryGet;
        inventoryNeed = choiceButton.inventoryNeed;
        inventoryMissingTarget = choiceButton.inventoryMissingTarget;
        inventoryDestroy = choiceButton.inventoryDestroy;
        
        alarm_set(0,2);
    };
    
    stateButton = instance_position(mouse_x, mouse_y, obj_stateButton);
    if(stateButton != noone){
        stateButton.y += 8;
        target = stateButton.target;
        alarm_set(2,2);
    };
    
    //Skip intro
    if(room == rm_intro) room_goto(rm_main);
};

//---Keyboard press inputs---
if(keyboard_check_released(vk_anykey)){
    //Skip intro
    if(room == rm_intro) room_goto(rm_main);
} 

//---Tooltips on inventory items---
var invItem;
invItem = instance_position(mouse_x, mouse_y, obj_item);

if(invItem != noone){
var tooltipPart;
    
    if(!instance_exists(obj_tooltipContainer)){    
        with(instance_create(mouse_x, mouse_y, obj_tooltipContainer)){
            if(!instance_exists(obj_tooltipTitle)){
                tooltipPart = instance_create(x, y, obj_tooltipTitle);
                tooltipPart.str = ds_grid_get(global.inventory, 0, 0);
            };
            if(!instance_exists(obj_tooltipText)){
                tooltipPart = instance_create(x, y, obj_tooltipText);
                tooltipPart.str = ds_grid_get(global.inventory, 3, 0);
            };
        };
    };
    

}else if(instance_exists(obj_tooltipContainer)){
    instance_destroy(obj_tooltipContainer);
    instance_destroy(obj_tooltipTitle);
    instance_destroy(obj_tooltipText);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
